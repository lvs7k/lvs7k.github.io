<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on lvs7k&#39;s blog</title>
    <link>https://lvs7k.github.io/categories/programming/</link>
    <description>Recent content in programming on lvs7k&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 20 Jul 2019 18:53:00 +0900</lastBuildDate>
    
	<atom:link href="https://lvs7k.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2019年7月 開発環境構築メモ(Windows7)</title>
      <link>https://lvs7k.github.io/posts/2019/07/set-up-dev-env/</link>
      <pubDate>Sat, 20 Jul 2019 18:53:00 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2019/07/set-up-dev-env/</guid>
      <description>しばらくプログラミングをしていなかったので環境を見直してみる。どうせ大してやらないので最小限やることだけ書く。
ユーザ環境変数 SCOOP = D:\scoop MSYS2_PATH_TYPE = inherit  インストール  Scoop MSYS2 Visual Studio Code  MSYS2とVisual Studio CodeもScoopでインストールしても良いかもしれない。
インストール後に  scoop install git scoop install haskell scoop install hugo  Visual Studio Code  settings.json  // 既定の設定を上書きするには、このファイル内に設定を挿入します { /* editor */ &amp;quot;editor.fontSize&amp;quot;: 20, &amp;quot;editor.rulers&amp;quot;: [80], &amp;quot;editor.wordWrap&amp;quot;: &amp;quot;off&amp;quot;, &amp;quot;editor.multiCursorModifier&amp;quot;: &amp;quot;ctrlCmd&amp;quot;, &amp;quot;editor.acceptSuggestionOnEnter&amp;quot;: &amp;quot;off&amp;quot;, &amp;quot;files.trimTrailingWhitespace&amp;quot;: true, &amp;quot;workbench.editor.enablePreview&amp;quot;: false, &amp;quot;workbench.startupEditor&amp;quot;: &amp;quot;none&amp;quot;, &amp;quot;workbench.colorTheme&amp;quot;: &amp;quot;Abyss&amp;quot;, &amp;quot;extensions.autoUpdate&amp;quot;: false, &amp;quot;zenMode.hideStatusBar&amp;quot;: false, /* shell */ &amp;quot;terminal.</description>
    </item>
    
    <item>
      <title>初めてのCMake</title>
      <link>https://lvs7k.github.io/posts/2019/01/what-i-wish-i-knew-about-cmake/</link>
      <pubDate>Mon, 14 Jan 2019 11:30:24 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2019/01/what-i-wish-i-knew-about-cmake/</guid>
      <description>初めてCMake使ったからメモ
これより読むべき公式より分かりやすいチュートリアル  CMake Tutorial – Onur Dündar – Medium  参考リンク  cmake-commands(7) CMakeを使ってみた How To Find Libraries SIGIL - CMakeLists.txt kigster/cmake-project-template  Hello, world!  フォルダ構成
hello.h hello.c CMakeLists.txt  CMakeLists.txt
cmake_minimum_required(VERSION 3.0) project (hello) include_directories(${PROJECT_SOURCE_DIR}) add_executable(${PROJECT_NAME} hello.c)   ビルド mkdir build cd build cmake .. -G &amp;quot;MSYS Makefiles&amp;quot; make VERBOSE=1 ./hello.exe  Hello, world!  ライブラリのリンク  CMake付属のモジュールが存在する場合  cmake --help-module-listでモジュール一覧を表示 find_package(OpenGL REQUIRED)のように使う  存在しない場合  find_library (&amp;lt;VAR&amp;gt; NAMES name1 [name2 .</description>
    </item>
    
    <item>
      <title>HaskellでFFIを書く準備</title>
      <link>https://lvs7k.github.io/posts/2019/01/haskell-ffi-practice/</link>
      <pubDate>Sun, 13 Jan 2019 15:19:35 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2019/01/haskell-ffi-practice/</guid>
      <description>以下の2つのパターンについてFFIをやってみた。
 ライブラリで自作のCの関数を使う 外部のライブラリに対するバインディングを書く  1. ライブラリで自作のCの関数を使う GitHubに上げました
 フォルダ構成
app - Main.hs cbits - person.c include - person.h src - Person.hsc  package.yaml
  extra-source-files: - README.md - ChangeLog.md - include/** - cbits/** library: source-dirs: src include-dirs: - include c-sources: - cbits/*.c build-tools: - hsc2hs:hsc2hs  これだけでstack buildしてstack runできる。
2. 外部のライブラリに対するバインディングを書く 例えばRWH17章のようにPCREのバインディングを書くなら
 準備
pacman -S mingw64/mingw-w64-x86_64-pcre  フォルダ構成
app - Main.hs include - pcre.h -- mingw64/includeからコピー src - Pcre.</description>
    </item>
    
    <item>
      <title>Haskellでオンライン対戦じゃんけんゲーム</title>
      <link>https://lvs7k.github.io/posts/2019/01/online-rock-paper-scissors/</link>
      <pubDate>Wed, 02 Jan 2019 23:05:03 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2019/01/online-rock-paper-scissors/</guid>
      <description>マルチスレッドプログラミング難しい  forkFinallyとかwithAsyncとかraceとかconcurrentlyとかどれを使えば良いのか 検索してもちょうどいい教材的なコードが見つからない race_ (putStrLn =&amp;lt;&amp;lt; getLine) (return ())がgetLineの終了を待つのはなぜ？  コード  nc localhost 1234で起動 バグあり  Main.hs: &amp;lt;socket: 444&amp;gt;: commitBuffer: invalid argument (Invalid argument) なにこれ？   {-# OPTIONS_GHC -fno-warn-warnings-deprecations #-} {-# LANGUAGE RecordWildCards #-} module Main where import Control.Exception import Control.Monad import Control.Monad.STM import Control.Concurrent import Control.Concurrent.Async import Control.Concurrent.STM import Data.Unique import Network import System.IO import Text.Printf import qualified Data.Map.Strict as M main :: IO () main = withSocketsDo $ do global &amp;lt;- newGlobal forkIO $ monitorClients global socket &amp;lt;- listenOn (PortNumber 1234) putStrLn &amp;quot;Listening on port 1234 .</description>
    </item>
    
    <item>
      <title>2018年12月 開発環境構築メモ(Windows7)</title>
      <link>https://lvs7k.github.io/posts/2018/12/set-up-dev-env/</link>
      <pubDate>Mon, 31 Dec 2018 22:58:53 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2018/12/set-up-dev-env/</guid>
      <description>ユーザ環境変数 SCOOP = D:\scoop STACK_ROOT = D:\sr  インストール  PortableGit MSYS2 Scoop The Haskell Tool Stack Visual Studio Code  MSYS2  ~/.bash_profile  P1=&amp;quot;/c/PortableGit/cmd&amp;quot; P2=&amp;quot;/d/stack/local/bin&amp;quot; P3=&amp;quot;/d/scoop/shims&amp;quot; PATH=&amp;quot;${PATH}:${P1}:${P2}:${P3}&amp;quot; if [ -f &amp;quot;${HOME}/.bashrc&amp;quot; ] ; then source &amp;quot;${HOME}/.bashrc&amp;quot; fi   ~/.bashrc  source ~/git-completion.bash eval &amp;quot;$(stack --bash-completion-script stack)&amp;quot;   gitとstack.exeでTAB補完が効くようにする stack.exeでないと補完が効かない（stackではダメ） git-completion.bash  Stack  $STACK_ROOT/config.yaml  templates: params: author-name: lvs7k author-email: lvs7k@example.com category: Your Projects Category copyright: &#39;Copyright (c) 2019 lvs7k&#39; github-username: lvs7k skip-msys: true local-bin-path: D:\stack\local\bin local-programs-path: D:\stack\  Visual Studio Code  settings.</description>
    </item>
    
    <item>
      <title>Hugoでこのブログを作った時のメモ</title>
      <link>https://lvs7k.github.io/posts/2018/11/how-to-create-this-blog/</link>
      <pubDate>Sat, 10 Nov 2018 17:10:21 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2018/11/how-to-create-this-blog/</guid>
      <description>Quick Start | Hugo
環境  Windows 7 Chocolatey v0.10.11 git 2.19.1 hugo 0.49  Hugoのインストール  Chocolateyをインストール
 Chocolateyでgitをインストール
 choco install git  ChocolateyでHugoをインストール
 choco install hugo -confirm  GitHubでリポジトリ作成
 Repository name : &amp;lt;username&amp;gt;.github.io Initialize this repository with a READMEにチェックを入れた   Hugoで静的サイト生成  サイト作成
 hugo new site &amp;lt;フォルダ名&amp;gt; cd &amp;lt;フォルダ名&amp;gt; git init  テーマの追加
 git add submodule https://github.com/dplesca/purehugo.git themes/purehugo  コンフィグ設定
 config.</description>
    </item>
    
  </channel>
</rss>