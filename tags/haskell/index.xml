<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on lvs7k&#39;s blog</title>
    <link>https://lvs7k.github.io/tags/haskell/</link>
    <description>Recent content in Haskell on lvs7k&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 23 Nov 2018 17:19:12 +0900</lastBuildDate>
    
	<atom:link href="https://lvs7k.github.io/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Haskellで蟻本（初級編） - グラフ</title>
      <link>https://lvs7k.github.io/posts/2018/pccb-easy-5/</link>
      <pubDate>Fri, 23 Nov 2018 17:19:12 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2018/pccb-easy-5/</guid>
      <description>※蟻本の入力例でしかテストしていません
TODO: コードをもっと綺麗にする
入力の形式について 標準入力は下記の形式で与えられるものとする。
 n: 頂点数 m: 辺の数 c: 重み  n m f1 t1 f2 t2 ... fn tn  n m f1 t1 c1 f2 t2 c2 ... fn tn cn  グラフの表現 隣接行列も隣接リストもaccumArrayを使えば良い。
隣接行列 {-# LANGUAGE BangPatterns, FlexibleContexts #-} import Control.Monad import Control.Monad.ST import Data.Array.ST import Data.Array import Data.STRef import Data.List -- 隣接行列 buildGMatrix :: (Int, Int) -&amp;gt; [(Int, Int)] -&amp;gt; Array (Int, Int) Int buildGMatrix (i, j) es = accumArray (flip const) 0 ((i, i), (j, j)) (zip es (repeat 1))  隣接リスト -- 隣接リスト buildGList :: (Int, Int) -&amp;gt; [(Int, a)] -&amp;gt; Array Int [a] buildGList (i, j) es = accumArray (flip (:)) [] (i, j) es   containersのData.</description>
    </item>
    
    <item>
      <title>Haskellで蟻本（初級編） - データ構造</title>
      <link>https://lvs7k.github.io/posts/2018/pccb-easy-4/</link>
      <pubDate>Tue, 20 Nov 2018 21:01:17 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2018/pccb-easy-4/</guid>
      <description>※蟻本の入力例でしかテストしていません
優先度付きキュー  多くのプログラミング言語では効率的に実装されたプライオリティキューが標準で含まれています。
 と書かれているが、Haskellには標準で含まれていない。
じゃあどうするかというと
 containersのMapかSetのMin/Maxの関数で頑張る 自分で作る  の2択になると思う。
Leftist Heap module Heap ( Heap (..) , meld , push , pop ) where import Control.Monad data Heap a = Empty | Node !Int !a !(Heap a) !(Heap a) deriving Show rank :: Heap a -&amp;gt; Int rank Empty = 0 rank (Node s _ _ _) = s heap :: a -&amp;gt; Heap a -&amp;gt; Heap a -&amp;gt; Heap a heap x a b | ra &amp;lt; rb = Node (ra + 1) x b a | otherwise = Node (rb + 1) x a b where ra = rank a rb = rank b meld :: Ord a =&amp;gt; Heap a -&amp;gt; Heap a -&amp;gt; Heap a meld a Empty = a meld Empty b = b meld a@(Node _ ax al ar) b@(Node _ bx bl br) | ax &amp;lt; bx = heap ax al (meld ar b) | otherwise = heap bx bl (meld br a) push :: Ord a =&amp;gt; a -&amp;gt; Heap a -&amp;gt; Heap a push x a = meld a (Node 1 x Empty Empty) pop :: Ord a =&amp;gt; Heap a -&amp;gt; Maybe (a, Heap a) pop Empty = Nothing pop (Node _ x l r) = Just (x, meld l r) test :: (Show a, Ord a) =&amp;gt; [a] -&amp;gt; IO () test xs = do heap &amp;lt;- flip (flip foldM Empty) xs $ \h i -&amp;gt; do let h&#39; = push i h print h&#39; return h&#39; putStrLn &amp;quot;--------------------&amp;quot; flip (flip foldM_ heap) [1 .</description>
    </item>
    
    <item>
      <title>Haskellで蟻本（初級編） - 動的計画法</title>
      <link>https://lvs7k.github.io/posts/2018/pccb-easy-3/</link>
      <pubDate>Mon, 19 Nov 2018 22:09:54 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2018/pccb-easy-3/</guid>
      <description>※蟻本の入力例でしかテストしていません
{-# LANGUAGE BangPatterns, FlexibleContexts #-} import Control.Monad import Data.List import qualified Data.ByteString.Char8 as B import Control.Monad.ST import Data.Array.ST import Data.Array import qualified Data.Map.Strict as M -- 01 ナップサック問題 q1 :: Int -&amp;gt; Int -&amp;gt; [(Int, Int)] -&amp;gt; Int q1 n m wvs = go n m where wva = listArray (1, n) wvs memo = listArray ((0, 0), (n, m)) [go i j | i &amp;lt;- [0 .. n], j &amp;lt;- [0 .</description>
    </item>
    
    <item>
      <title>Haskellで蟻本（初級編） - 貪欲法</title>
      <link>https://lvs7k.github.io/posts/2018/pccb-easy-2/</link>
      <pubDate>Sun, 18 Nov 2018 12:39:46 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2018/pccb-easy-2/</guid>
      <description>※蟻本の入力例でしかテストしていません
{-# LANGUAGE BangPatterns, FlexibleContexts #-} import Control.Monad import Data.List import Control.Monad.ST import Data.Array.ST import Data.STRef import Data.Array (Array) import Data.Array.Unboxed (UArray) import Data.Array.IArray import qualified Data.Set as S -- 硬貨の問題 q1 :: Int -&amp;gt; Int -&amp;gt; Int -&amp;gt; Int -&amp;gt; Int -&amp;gt; Int -&amp;gt; Int -&amp;gt; Int q1 n c1 c5 c10 c50 c100 c500 = go 0 n cs where cs = zip [500, 100, 50, 10, 5, 1] [c500, c100, c50, c10, c5, c1] go !</description>
    </item>
    
    <item>
      <title>Haskellで蟻本（初級編） - 全探索</title>
      <link>https://lvs7k.github.io/posts/2018/pccb-easy-1/</link>
      <pubDate>Sat, 17 Nov 2018 20:40:14 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2018/pccb-easy-1/</guid>
      <description>※蟻本の入力例でしかテストしていません
{-# LANGUAGE BangPatterns, FlexibleContexts #-} import Control.Monad import Control.Monad.ST import Data.Array.ST import Data.Array.Unboxed (UArray) import Data.Array.IArray import Data.STRef import qualified Data.Set as S -- 部分和問題 q1 :: Int -&amp;gt; Int -&amp;gt; [Int] -&amp;gt; Bool q1 n k as = go 0 as where go !i [] | i == k = True | otherwise = False go !i (b:bs) = go (i + b) bs || go i bs q1&#39; :: Int -&amp;gt; Int -&amp;gt; [Int] -&amp;gt; Bool q1&#39; n k as = go k as where go !</description>
    </item>
    
    <item>
      <title>Haskellで動的計画法（準備編）</title>
      <link>https://lvs7k.github.io/posts/2018/dynamic-programming-in-haskell/</link>
      <pubDate>Mon, 12 Nov 2018 21:47:14 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2018/dynamic-programming-in-haskell/</guid>
      <description>知りたいこと  Haskellで動的計画法を書く時にどういう書き方をすればいいのか  試してみたこと  f(n) = f(n - 1) + 1 初項1、公差1の等差数列の和をn = 10 ^ 6とn = 10 ^ 7で計算 PowerShellのMeasure-Commandで時間を計測 時間計測時にstack runやstack execを使うと200ms~400ms余計に時間がかかった  結論  f1でTLEにならないならf1 ボトムアップに配列埋める場合はf2 f1では間に合わないがメモ化再帰したい場合はf3 間違ったこと言ってたらごめんなさい  {-# LANGUAGE BangPatterns #-} import Control.Monad import Control.Monad.ST import Data.List import Data.Array import Data.Array.ST import qualified Data.IntMap.Strict as IMS import Control.Monad.Trans.Class import Control.Monad.Trans.Cont -- f(n) = f(n - 1) + 1 -- stack build -- Measure-Command { .</description>
    </item>
    
  </channel>
</rss>