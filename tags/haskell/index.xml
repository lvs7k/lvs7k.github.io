<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on lvs7k&#39;s blog</title>
    <link>https://lvs7k.github.io/tags/haskell/</link>
    <description>Recent content in Haskell on lvs7k&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 12 Nov 2018 21:47:14 +0900</lastBuildDate>
    
	<atom:link href="https://lvs7k.github.io/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Haskellで動的計画法（準備編）</title>
      <link>https://lvs7k.github.io/posts/2018/dynamic-programming-in-haskell/</link>
      <pubDate>Mon, 12 Nov 2018 21:47:14 +0900</pubDate>
      
      <guid>https://lvs7k.github.io/posts/2018/dynamic-programming-in-haskell/</guid>
      <description>知りたいこと  Haskellで動的計画法を書く時にどういう書き方をすればいいのか  試してみたこと  f(n) = f(n - 1) + 1 初項1、公差1の等差数列の和をn = 10 ^ 6とn = 10 ^ 7で計算 PowerShellのMeasure-Commandで時間を計測 時間計測時にstack runやstack execを使うと200ms~400ms余計に時間がかかった  結論  f1でTLEにならないならf1 ボトムアップに配列埋める場合はf2 f1では間に合わないがメモ化再帰したい場合はf3 間違ったこと言ってたらごめんなさい  コード {-# LANGUAGE BangPatterns #-} import Control.Monad import Control.Monad.ST import Data.List import Data.Array import Data.Array.ST import qualified Data.IntMap.Strict as IMS import Control.Monad.Trans.Class import Control.Monad.Trans.Cont -- f(n) = f(n - 1) + 1 -- stack build -- Measure-Command { .</description>
    </item>
    
  </channel>
</rss>